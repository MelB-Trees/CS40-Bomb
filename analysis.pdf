Jason Wang and Edward Lai
Bomb #4

Acknowledges help and collaboration

         Thanks to Mark, Noah, and TAs in lab and office hours! :)

Says approximately how many hours you have spent on the assignment:

         10 hours

----- Defuse Section -----

Phase 1: - Consider what you are about to do
Phase 2:   1 6 11 16 21 26 
Phase 3:   5 -972
Phase 4:   6 Duke_Leto
Phase 5:   aepkma
Phase 6:   563
Phase 7:.  20

----- Description Section -----

Phase 1: Compares the input to a given string. If the strings do not match, it explodes. 

Phase 2: Reads in 6 numbers and checks if these 6 numbers are in increasing order with a difference of 5 between consecutive numbers. 
         Otherwise, it explodes.

Phase 3: This phase has a predetermined sequence of arithemtic calculations, either adding or subtracting, and the number of calculations
         done is determined by the value of the first input (a number between 0 and 5). The second number of the input must equal the answer of
         the resulting calculation.

Phase 4: This phase calculates 7 to the power of our input, and the result must match their predetermined answer, in this case, 117649. 
         Thus, we found the answer to be 6. 

A Code section that gives your notion of the C code that is equivalent to the machine code in Phases 5 and 6.

Phase 5:
We didn't write code for the helper functions

void explode_bomb() 
{
        return;
}

char decode_char(char c)
{
        return 0;
}

int string_length(char *s)
{
        return 0;
}

//return 0 is equal, 1 is not equal
int strings_not_equal(char *s1, char *s2) {
        return 0;
}

void phase5(char *input) 
{
        if(string_length(input) != 6) {
                explode_bomb();
        }

        char decoded_input[6];
        char *ans = "saints";

        /* converts each character in the input into decoded char */
        for(int i = 0; i < 6; i++) {
                decoded_input[i] = decode_char(input[i]);
        }

        if(strings_not_equal(decoded_input, ans) != 0) {
                explode_bomb();
        }

        return;
}

Phase 6:
The construction of the linked list is incomplete here, since
we don't have the specific values of each index

typedef struct list
{
        int value;
        struct list *next;
}list;

void explode_bomb() 
{
        return;
}

//makes a linked list using a given root
void fun6(struct list *root)
{
        struct list *curr = root;
        /* add specific value to curr->value */
        for(int i = 0; i < 9; i++) {
                struct list *next;
                curr->next = next;
                curr = next;
                /* add specific value to curr->value */
        }
        return;
}

void phase6(int input) 
{
        struct list *root;
        fun6(root);
        struct list *curr = root;

        //advancing through the list to get the 9th index
        for(int i = 0; i < 9; i++) {
                curr = root->next;
        }

        if(input != curr->value) {
                explode_bomb();
        }
        return;
}

