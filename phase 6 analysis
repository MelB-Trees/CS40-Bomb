000000000040134c <fun6>:
/* keep checking the values of %rdi, %r8, %rax, %rcx, and %rdx as well as their addresses + 8 bytes (pointers) */


  40134c:	4c 8b 47 08          	mov    0x8(%rdi),%r8  /* r8 set to pointer set by %rdi, potentially a child node? */
  401350:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi) /* set to 0 i think */
  401357:	00 
  401358:	4d 85 c0             	test   %r8,%r8  
  40135b:	75 2b                	jne    401388 <fun6+0x3c> /* continues fun6 if r* is no longer 0 */
  40135d:	48 89 f8             	mov    %rdi,%rax          /* sets rax to rdi val, will be compared at end */
  401360:	c3                   	retq    


/* primary loop, goes through sections of this until %rax is 0 */ 
  401361:	48 39 c1             	cmp    %rax,%rcx
  401364:	75 08                	jne    40136e <fun6+0x22>
  401366:	48 89 c2             	mov    %rax,%rdx
  401369:	4c 89 c7             	mov    %r8,%rdi
  40136c:	eb 0a                	jmp    401378 <fun6+0x2c>
  40136e:	48 89 c2             	mov    %rax,%rdx
  401371:	48 89 c8             	mov    %rcx,%rax
  401374:	4c 89 40 08          	mov    %r8,0x8(%rax)
  401378:	49 8b 40 08          	mov    0x8(%r8),%rax           /* sets rax to child(?) of r8, then tests if should quit func if child is zero */
  40137c:	49 89 50 08          	mov    %rdx,0x8(%r8)           /* pushes former value of %rdi from 4013ab to child of r8 */ 
  401380:	48 85 c0             	test   %rax,%rax
  401383:	74 d8                	je     40135d <fun6+0x11>      /* returns from fun6 if %rax is zero */ 
  401385:	49 89 c0             	mov    %rax,%r8
  401388:	48 85 ff             	test   %rdi,%rdi               /* fun6 loop begins here when %r8 is still nonzero */
  40138b:	74 1e                	je     4013ab <fun6+0x5f>      
  40138d:	41 8b 30             	mov    (%r8),%esi              /* if %rdi is nonzero */
  401390:	48 89 f8             	mov    %rdi,%rax
  401393:	48 89 f9             	mov    %rdi,%rcx               /* track what %rcx equals, since it'll be compared at the end of phase_6 */  
  401396:	39 30                	cmp    %esi,(%rax)             /* $esi stores our input, determines where func goes */ 
  401398:	7e c7                	jle    401361 <fun6+0x15>
  40139a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40139e:	48 89 c1             	mov    %rax,%rcx
  4013a1:	48 85 d2             	test   %rdx,%rdx
  4013a4:	74 ce                	je     401374 <fun6+0x28>
  4013a6:	48 89 d0             	mov    %rdx,%rax
  4013a9:	eb eb                	jmp    401396 <fun6+0x4a>

  4013ab:	48 89 fa             	mov    %rdi,%rdx          /* goes here if %rdi is 0 */
  4013ae:	4c 89 c7             	mov    %r8,%rdi
  4013b1:	eb c5                	jmp    401378 <fun6+0x2c>


00000000004013b3 <phase_6>:
  4013b3:	48 83 ec 08          	sub    $0x8,%rsp
  4013b7:	ba 0a 00 00 00       	mov    $0xa,%edx                /* moves 10 into edx */
  4013bc:	be 00 00 00 00       	mov    $0x0,%esi                /* zeros out the esi */
  4013c1:	e8 9a fa ff ff       	callq  400e60 <strtol@plt>      /* converts string input to long */
  4013c6:	89 05 54 2f 20 00    	mov    %eax,0x202f54(%rip)        # 604320 <node0>       /* store the result into node0 (memory) */
  4013cc:	bf 20 43 60 00       	mov    $0x604320,%edi          /* check what $edi is set to */
  4013d1:	e8 76 ff ff ff       	callq  40134c <fun6>           /* calls the function */
  4013d6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4013da:	48 8b 40 08          	mov    0x8(%rax),%rax
  4013de:	48 8b 40 08          	mov    0x8(%rax),%rax
  4013e2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4013e6:	48 8b 40 08          	mov    0x8(%rax),%rax          /* looks like %rax is a node after fun6 call and goes back through
                                                                  pointers, keep printing out $rax and map out what's happening */
  4013ea:	8b 0d 30 2f 20 00    	mov    0x202f30(%rip),%ecx        # 604320 <node0>
  4013f0:	39 08                	cmp    %ecx,(%rax)
  4013f2:	75 05                	jne    4013f9 <phase_6+0x46>  /* explodes if $ecx and $rax values don't match */
  4013f4:	48 83 c4 08          	add    $0x8,%rsp
  4013f8:	c3                   	retq   
  4013f9:	e8 92 05 00 00       	callq  401990 <explode_bomb>
  4013fe:	eb f4                	jmp    4013f4 <phase_6+0x41>
