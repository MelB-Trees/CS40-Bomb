/*
 * HYPOTHESIS: 
 *    This phase is checking that you give the input 6 numbers that
 *    are incrementing by 5 each
 *    example: 1 6 11 16 21 26
 * 
 */


  40109f:	e8 61 09 00 00       	callq  401a05 <read_line>
  4010a4:	48 89 c7             	mov    %rax,%rdi
  4010a7:	e8 e4 00 00 00       	callq  401190 <phase_2>

0000000000401190 <phase_2>:
  401190:	55                   	push   %rbp
  401191:	53                   	push   %rbx

  401192:	48 83 ec 28          	sub    $0x28,%rsp 
/* moves address of rsp back 40 bytes, why 40 if there's 6 ints? */

  401196:	48 89 e6             	mov    %rsp,%rsi
/* sets %rsi to beginning of %rsp, used in <read_six_numbers>

  401199:	e8 28 08 00 00       	callq  4019c6 <read_six_numbers> 
/* From what I can tell, all this function does is read in 6 numbers from the input?*/

  40119e:	48 89 e3             	mov    %rsp,%rbx

  4011a1:	48 8d 6c 24 14       	lea    0x14(%rsp),%rbp 
/* %rbp is set to address of %rsp + 20 bytes (0x14 is HEX!!!!) */

  4011a6:	eb 09                	jmp    4011b1 <phase_2+0x21>

  4011a8:	48 83 c3 04          	add    $0x4,%rbx 
/* loop returns here, I think this is incrementing the array one index 
 * because int = 4 bytes 
 */

  4011ac:	48 39 eb             	cmp    %rbp,%rbx 
/* is this comparison checking if the end of the array has been reached? */

  4011af:	74 11                	je     4011c2 <phase_2+0x32> /
* jump to end if end of array i think */

  4011b1:	8b 03                	mov    (%rbx),%eax 
/* loop begins here, sets the $eax register to next value in array? */

  4011b3:	83 c0 05             	add    $0x5,%eax /* adds 5 to value stored in $eax */
  4011b6:	39 43 04             	cmp    %eax,0x4(%rbx) 
/* i think this compares if the next integer is 5 greater than the previous 
 * i also don't see any references to another set of numbers, so maybe the exact numbers doesn't matter?? 
 */

  4011b9:	74 ed                	je     4011a8 <phase_2+0x18> /* loop jumps back here if equal */ 

  4011bb:	e8 d0 07 00 00       	callq  401990 <explode_bomb> /* not equal, bad :( */
  4011c0:	eb e6                	jmp    4011a8 <phase_2+0x18>

  4011c2:	48 83 c4 28          	add    $0x28,%rsp
/* resets stack pointer */

  4011c6:	5b                   	pop    %rbx
  4011c7:	5d                   	pop    %rbp
  4011c8:	c3                   	retq  

00000000004019c6 <read_six_numbers>:
  4019c6:	48 83 ec 08          	sub    $0x8,%rsp

  4019ca:	48 89 f2             	mov    %rsi,%rdx
/* $rdx stores pointer to first int? */

  4019cd:	48 8d 4e 04          	lea    0x4(%rsi),%rcx 
/* assigns rcx to next int? */

  4019d1:	48 8d 46 14          	lea    0x14(%rsi),%rax
/* assigns rax to last int (20 bytes = 5 ints forward)? */

  4019d5:	50                   	push   %rax
/* moves this value onto stack */

  4019d6:	48 8d 46 10          	lea    0x10(%rsi),%rax
/* assigns %rax to second to last int (16 bytes = 4 ints) */
  4019da:	50                   	push   %rax /* same stack push thing */

  4019db:	4c 8d 4e 0c          	lea    0xc(%rsi),%r9
/* fourth int (c = 12 bytes = 3 ints) */

  4019df:	4c 8d 46 08          	lea    0x8(%rsi),%r8
/* third int (8 bytes = 4 ints) */

  4019e3:	be 08 21 40 00       	mov    $0x402108,%esi
/* $esi holds whatever is in this address, presumably the values out input is being compared against? */
/* actually no idea, bc I don't see %esi reappear again */

  4019e8:	b8 00 00 00 00       	mov    $0x0,%eax

  4019ed:	e8 9e f4 ff ff       	callq  400e90 <sscanf@plt> /* I think this changes %eax? */
  4019f2:	48 83 c4 10          	add    $0x10,%rsp /* advances address by 16 bytes */
/* something must've happened here for %eax to be changed to be 6+? 
 * so this part is probably checking that at least 6 ints were given
 */

  4019f6:	83 f8 05             	cmp    $0x5,%eax
  4019f9:	7e 05                	jle    401a00 <read_six_numbers+0x3a> /* jumps to explode_bomb if %eax is less than or equal to 5? */
/* otherwise, returns */
  4019fb:	48 83 c4 08          	add    $0x8,%rsp
  4019ff:	c3                   	retq   

  401a00:	e8 8b ff ff ff       	callq  401990 <explode_bomb>
  
